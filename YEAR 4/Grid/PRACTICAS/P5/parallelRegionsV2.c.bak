#include <omp.h>
#include <stdio.h>
int main(){
	int nthreads,tid;
	//Variable tid is private to each thread
	#pragma omp sections parallel num_threads(8) private(tid)
	{
		#pragma omp section
		{
			tid=omp_get_thread_num();
			nthreads=omp_get_num_threads();
			printf("Thread %d, of %d, computes section 1\n", tid, nthreads);
		}
		#pragma omp section
		{
			tid=omp_get_thread_num();
			nthreads=omp_get_num_threads();
			printf("Thread %d, of %d, computes section 2\n", tid, nthreads);
		}
		#pragma omp section
		{
			tid=omp_get_thread_num();
			nthreads=omp_get_num_threads();
			printf("Thread %d, of %d, computes section 3\n", tid, nthreads);
		}
		#pragma omp section
		{
			tid=omp_get_thread_num();
			nthreads=omp_get_num_threads();
			printf("Thread %d, of %d, computes section 4\n", tid, nthreads);
		}
		
	}//Parallel region ends

}