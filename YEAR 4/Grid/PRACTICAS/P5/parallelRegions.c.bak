#include <omp.h>
#include <stdio.h>
int main(){
	int nthreads,tid;
	//Variable tid is private to each thread
	#pragma omp parallel num_threads(8) private(tid)
	{
		#pragma omp sections
		{
			#pragma omp section
			{
				tid=omp_get_thread_num();
				nthreads=omp_get_num_threads();
				printf("Thread %d, of %d, computes section 1\n", tid, nthreads);
			}
			#pragma omp section
			{
				tid=omp_get_thread_num();
				nthreads=omp_get_num_threads();
				printf("Thread %d, of %d, computes section 1\n", tid, nthreads);
			}
			#pragma omp section
			{
				tid=omp_get_thread_num();
				nthreads=omp_get_num_threads();
				printf("Thread %d, of %d, computes section 1\n", tid, nthreads);
			}
			#pragma omp section
			{
				tid=omp_get_thread_num();
				nthreads=omp_get_num_threads();
				printf("Thread %d, of %d, computes section 1\n", tid, nthreads);
			}
			
		}//Sections`end

	}//Parallel region ends

}